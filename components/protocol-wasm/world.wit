/// Exposes functions to perform package validations and inclusion proofs from the `protocol` and `transparency` crates
/// Protobuf structures for validations can be found in the warg.proto file
/// Protobuf structures for inclusion proofs can be found in the proof.proto file

default world component {
  export protocol: self.protocol
}                

interface protocol {
    record proto-envelope-body {
      content-bytes: list<u8>,
      key-id: string,
      signature: string
    }
    enum hash-algorithm {
      sha256
    }
    record dyn-hash {
      algo: hash-algorithm,
      bytes: list<u8>
    }
    variant record-id {
      dyn-hash(dyn-hash)
    }
    record head {
      digest: record-id,
      timestamp: option<string>
    }
    enum permission {
      release,
      yank
    }
    record permission-entry {
      key-id: string,
      permissions: list<permission>
    }
    record key-entry {
      key-id: string,
      public-key: string
    }
    record released {
      content: dyn-hash
    }
    record yanked {
      by: string,
      timestamp: string
    }
    variant release-state {
      released(released),
      yanked(yanked)
    }
    record release {
      version: string,
      by: string,
      timestamp: string,
      state: release-state
    }
    type validator = u32
    record log-leaf {
      log-id: string,
      record-id: string
    }
    record package-info {
      name: string,
      checkpoint: option<string>,
      state: validator,
      heads: list<log-leaf>
    }
    record map-checkpoint {
      log-root: string,
      log-length: u32,
      map-root: string
    }
    type encoded-map-proof-bundle = string
    type encoded-log-proof-bundle = string
    record inclusion {
      log: encoded-log-proof-bundle,
      map: encoded-map-proof-bundle
    }
    get-algorithm: func(this: validator) -> option<hash-algorithm>
    get-head: func(this: validator) -> option<head>
    get-permissions: func(this: validator) -> list<permission-entry>
    get-releases: func(this: validator) -> list<release>
    get-keys: func(this: validator) -> option<list<key-entry>>
    validate: func(package-records: list<proto-envelope-body>) -> package-info
    prove-inclusion: func(input: inclusion, checkpoint: map-checkpoint, heads: list<log-leaf>)
  }
